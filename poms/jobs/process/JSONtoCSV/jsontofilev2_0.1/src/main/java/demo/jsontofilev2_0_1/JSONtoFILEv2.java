// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package demo.jsontofilev2_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.MyRoutine;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: JSONtoFILEv2 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status DEV
 */
public class JSONtoFILEv2 implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "JSONtoFILEv2";
	private final String projectName = "DEMO";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					JSONtoFILEv2.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(JSONtoFILEv2.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tExtractJSONFields_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTRequest_1_Loop_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tRESTRequest_1_In_error(exception, errorComponent, globalMap);

	}

	public void tRESTRequest_1_In_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTRequest_1_Loop_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	private boolean runInTalendEsbRuntimeContainer = false;

	public void setRunInTalendEsbRuntimeContainer(boolean flag) {
		runInTalendEsbRuntimeContainer = flag;
	}

	protected String restEndpoint;

	public void setRestEndpoint(String restEndpoint) {
		this.restEndpoint = restEndpoint;
	}

	private boolean runInDaemonMode = true;

	public void setRunInDaemonMode(boolean flag) {
		runInDaemonMode = flag;
	}

	private boolean restTalendJobAlreadyStarted = false;

	/**
	 * REST provider implementation
	 */
	@javax.ws.rs.Path("/")
	public static class RestServiceProviderImpl4TalendJob {

		@javax.ws.rs.core.Context
		private org.apache.cxf.jaxrs.ext.MessageContext messageContext;

		private final JSONtoFILEv2 job;

		public RestServiceProviderImpl4TalendJob(JSONtoFILEv2 job) {
			this.job = job;
		}

		private void populateRequestWithJobContext(
				java.util.Map<String, Object> requestGlobalMap, JSONtoFILEv2 job) {
			// pass job DataSources
			java.util.Map<String, routines.system.TalendDataSource> talendDataSources = (java.util.Map<String, routines.system.TalendDataSource>) job.globalMap
					.get(KEY_DB_DATASOURCES);
			if (null != talendDataSources) {
				java.util.Map<String, routines.system.TalendDataSource> restDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
				for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry : talendDataSources
						.entrySet()) {
					restDataSources.put(talendDataSourceEntry.getKey(),
							new routines.system.TalendDataSource(
									talendDataSourceEntry.getValue()
											.getRawDataSource()));
				}
				requestGlobalMap.put(KEY_DB_DATASOURCES, restDataSources);
			}

			// pass job shared connections
			requestGlobalMap.putAll(job.getSharedConnections4REST());

			// pass job concurrent map
			requestGlobalMap.put("concurrentHashMap",
					job.globalMap.get("concurrentHashMap"));
		}

		private void closePassedDataSourceConnections(
				java.util.Map<String, Object> requestGlobalMap) {
			// close connections in passed job DataSources
			try {
				java.util.Map<String, routines.system.TalendDataSource> restDataSources = (java.util.Map<String, routines.system.TalendDataSource>) requestGlobalMap
						.get(KEY_DB_DATASOURCES);
				if (null != restDataSources) {
					for (routines.system.TalendDataSource restDataSource : restDataSources
							.values()) {
						restDataSource.close();
					}
				}
			} catch (Throwable e) {
				e.printStackTrace(System.err);
			}
		}

		private javax.ws.rs.core.Response processRequest(
				java.util.Map<String, Object> request) {
			final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
			try {
				globalMap.put("restRequest", request);

				populateRequestWithJobContext(globalMap, job);

				job.tRESTRequest_1_LoopProcess(globalMap);

				java.util.Map<String, Object> response = (java.util.Map<String, Object>) globalMap
						.get("restResponse");

				Object responseBody = null;
				Integer status = null;
				java.util.Map<String, String> headers = null;
				if (null != response) {
					Object dropJsonRootProp = response
							.get("drop.json.root.element");
					Boolean dropJsonRoot = (null == dropJsonRootProp) ? false
							: (Boolean) dropJsonRootProp;
					messageContext.put("drop.json.root.element",
							dropJsonRoot.toString());

					responseBody = response.get("BODY");
					status = (Integer) response.get("STATUS");
					headers = (java.util.Map<String, String>) response
							.get("HEADERS");
				}
				if (null == status) {
					status = (request.containsKey("STATUS")) ? (Integer) request
							.get("STATUS") : 404;
				}

				javax.ws.rs.core.Response.ResponseBuilder responseBuilder = javax.ws.rs.core.Response
						.status(status).entity(responseBody);
				if (headers != null) {
					for (java.util.Map.Entry<String, String> header : headers
							.entrySet()) {
						responseBuilder.header(header.getKey(),
								header.getValue());
					}
				}

				return responseBuilder.build();

			} catch (Throwable ex) {
				ex.printStackTrace();
				throw new javax.ws.rs.WebApplicationException(ex, 500);
			} finally {
				// close DB connections
				closePassedDataSourceConnections(globalMap);
			}
		}

		private javax.ws.rs.core.Response processStreamingResponseRequest(
				final java.util.Map<String, Object> request) {

			javax.ws.rs.core.StreamingOutput streamingOutput = new javax.ws.rs.core.StreamingOutput() {
				public void write(java.io.OutputStream output) {
					final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
					try {
						globalMap.put("restResponseStream", output);

						globalMap.put("restRequest", request);

						populateRequestWithJobContext(globalMap, job);

						job.tRESTRequest_1_LoopProcess(globalMap);

						if (globalMap
								.containsKey("restResponseWrappingClosure")) {
							output.write(((String) globalMap
									.get("restResponseWrappingClosure"))
									.getBytes());
						}
					} catch (Throwable ex) {
						ex.printStackTrace();
						throw new javax.ws.rs.WebApplicationException(ex, 500);
					} finally {
						// close DB connections
						closePassedDataSourceConnections(globalMap);
					}
				}
			};

			return javax.ws.rs.core.Response.ok().entity(streamingOutput)
					.build();
		}

		@javax.ws.rs.POST()
		@javax.ws.rs.Path("/")
		@javax.ws.rs.Consumes({ "application/json" })
		@javax.ws.rs.Produces({ "application/json" })
		public javax.ws.rs.core.Response restout(

		String body

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "POST");
			request_tRESTRequest_1.put("OPERATION", "restout");
			request_tRESTRequest_1.put("PATTERN", "/");

			request_tRESTRequest_1.put("BODY", body);

			populateRequestInfo(request_tRESTRequest_1, messageContext);

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			return processRequest(request_tRESTRequest_1);
		}

		public javax.ws.rs.core.Response handleWrongRequest(
				org.apache.cxf.jaxrs.ext.MessageContext context, int status,
				String error) {

			// System.out.println("wrong call [uri: " +
			// context.getUriInfo().getPath() + " ; method: " +
			// context.getRequest().getMethod() + " ; status: " + status +
			// " ; error: " + error + "]");

			java.util.Map<String, Object> wrongRequest = new java.util.HashMap<String, Object>();
			wrongRequest.put("ERROR", error);
			wrongRequest.put("STATUS", status);
			wrongRequest.put("VERB", context.getRequest().getMethod());
			wrongRequest.put("URI", context.getUriInfo().getPath());
			wrongRequest.put("URI_BASE", context.getUriInfo().getBaseUri()
					.toString());
			wrongRequest.put("URI_ABSOLUTE", context.getUriInfo()
					.getAbsolutePath().toString());
			wrongRequest.put("URI_REQUEST", context.getUriInfo()
					.getRequestUri().toString());

			return processRequest(wrongRequest);
		}

		private void populateRequestInfo(java.util.Map<String, Object> request,
				org.apache.cxf.jaxrs.ext.MessageContext context) {
			final javax.ws.rs.core.UriInfo ui = context.getUriInfo();

			request.put("URI", ui.getPath());
			request.put("URI_BASE", ui.getBaseUri().toString());
			request.put("URI_ABSOLUTE", ui.getAbsolutePath().toString());
			request.put("URI_REQUEST", ui.getRequestUri().toString());

			request.put("ALL_HEADER_PARAMS", context.getHttpHeaders()
					.getRequestHeaders());
			request.put("ALL_QUERY_PARAMS", ui.getQueryParameters());

			javax.ws.rs.core.SecurityContext securityContext = context
					.getSecurityContext();
			if (null != securityContext
					&& null != securityContext.getUserPrincipal()) {
				request.put("PRINCIPAL_NAME", securityContext
						.getUserPrincipal().getName());
			}

			request.put("CorrelationID", context.get("CorrelationID"));

			request.put("MESSAGE_CONTEXT", context);
		}

		private void populateMultipartRequestInfo(
				java.util.Map<String, Object> request,
				org.apache.cxf.jaxrs.ext.MessageContext context,
				java.util.List<String> partNames) {
			java.util.Map<String, String> attachmentFilenames = new java.util.HashMap<String, String>();

			java.util.Map<String, java.util.Map<String, java.util.List<String>>> attachmentHeaders = new java.util.HashMap<String, java.util.Map<String, java.util.List<String>>>();

			for (String partName : partNames) {
				org.apache.cxf.jaxrs.ext.multipart.Attachment attachment = getFirstMatchingPart(
						context, partName);
				if (null != attachment) {
					attachmentHeaders.put(partName, attachment.getHeaders());
					if (null != attachment.getContentDisposition()) {
						String filename = attachment.getContentDisposition()
								.getParameter("filename");
						if (null != filename) {
							attachmentFilenames.put(partName, filename);
						}
					}
				}
			}

			request.put("ATTACHMENT_HEADERS", attachmentHeaders);
			request.put("ATTACHMENT_FILENAMES", attachmentFilenames);
		}

		private static org.apache.cxf.jaxrs.ext.multipart.Attachment getFirstMatchingPart(
				org.apache.cxf.jaxrs.ext.MessageContext context, String partName) {
			List<org.apache.cxf.jaxrs.ext.multipart.Attachment> attachments = org.apache.cxf.jaxrs.utils.multipart.AttachmentUtils
					.getAttachments(context);
			for (org.apache.cxf.jaxrs.ext.multipart.Attachment attachment : attachments) {
				if (partName.equals(attachment.getContentId())) {
					return attachment;
				}
				org.apache.cxf.jaxrs.ext.multipart.ContentDisposition cd = attachment
						.getContentDisposition();
				if (null != cd && partName.equals(cd.getParameter("name"))) {
					return attachment;
				}
			}
			// unexpected
			throw new javax.ws.rs.InternalServerErrorException();
		}
	}

	public static class ExceptionMapper4TalendJobRestService extends
			org.apache.cxf.jaxrs.impl.WebApplicationExceptionMapper {

		@javax.ws.rs.core.Context
		private org.apache.cxf.jaxrs.ext.MessageContext messageContext;

		private RestServiceProviderImpl4TalendJob provider;

		public ExceptionMapper4TalendJobRestService(
				RestServiceProviderImpl4TalendJob provider) {
			this.provider = provider;
		}

		public javax.ws.rs.core.Response toResponse(
				javax.ws.rs.WebApplicationException ex) {
			String error = null;
			javax.ws.rs.core.Response response = ex.getResponse();
			if (null != response && null != response.getEntity()) {
				error = response.getEntity().toString();
			}
			response = super.toResponse(ex);
			if (null == error) {
				if (null != response && null != response.getEntity()) {
					error = response.getEntity().toString();
				} else {
					error = null == ex.getCause() ? ex.getMessage() : ex
							.getCause().getMessage();
				}
			}
			response = provider.handleWrongRequest(messageContext,
					response.getStatus(), error);

			java.util.List<javax.ws.rs.core.MediaType> accepts = messageContext
					.getHttpHeaders().getAcceptableMediaTypes();
			javax.ws.rs.core.MediaType responseType = accepts.isEmpty() ? null
					: accepts.get(0);

			if (responseType == null
					|| !responseType.getSubtype().equals("xml")
					&& !responseType.getSubtype().equals("json")) {
				responseType = javax.ws.rs.core.MediaType.APPLICATION_XML_TYPE;
			}

			javax.ws.rs.core.Response r = javax.ws.rs.core.Response
					.status(response.getStatus()).entity(response.getEntity())
					.type(responseType).build();

			if (response.getHeaders() != null) {
				r.getHeaders().putAll(response.getHeaders());
			}

			return r;
		}
	}

	protected String checkEndpointUrl(String url) {
		final String defaultEndpointUrl = "http://127.0.0.1:8090/";

		String endpointUrl = url;
		if (null == endpointUrl || endpointUrl.trim().isEmpty()) {
			endpointUrl = defaultEndpointUrl;
		} else if (!endpointUrl.contains("://")) { // relative
			if (endpointUrl.startsWith("/")) {
				endpointUrl = endpointUrl.substring(1);
			}
			endpointUrl = defaultEndpointUrl + endpointUrl;
		}

		// test for busy
		java.net.URI endpointURI = java.net.URI.create(endpointUrl);
		String host = endpointURI.getHost();
		try {
			if (java.net.InetAddress.getByName(host).isLoopbackAddress()) {
				int port = endpointURI.getPort();
				java.net.ServerSocket ss = null;
				try {
					ss = new java.net.ServerSocket(port);
				} catch (IOException e) {
					// rethrow exception
					throw new IllegalArgumentException(
							"Cannot start provider with uri: " + endpointUrl
									+ ". Port " + port + " already in use.");
				} finally {
					if (ss != null) {
						try {
							ss.close();
						} catch (IOException e) {
							// ignore
						}
					}
				}
				try {
					// ok, let's doublecheck for silent listeners
					java.net.Socket cs = new java.net.Socket(host, port);
					// if succeed - somebody silently listening, fail!
					cs.close();
					// rethrow exception
					throw new IllegalArgumentException(
							"Cannot start provider with uri: " + endpointUrl
									+ ". Port " + port + " already in use.");
				} catch (IOException e) {
					// ok, nobody listens, proceed
				}
			}
		} catch (java.net.UnknownHostException e) {
			// ignore
		}

		return endpointUrl;
	}

	public static class StreamingDOM4JProvider extends
			org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider {

		public static final String SUPRESS_XML_DECLARATION = "supress.xml.declaration";

		public void writeTo(org.dom4j.Document doc, Class<?> cls,
				java.lang.reflect.Type type,
				java.lang.annotation.Annotation[] anns,
				javax.ws.rs.core.MediaType mt,
				javax.ws.rs.core.MultivaluedMap<String, Object> headers,
				java.io.OutputStream os) throws java.io.IOException,
				javax.ws.rs.WebApplicationException {
			if (mt.getSubtype().contains("xml")) {
				org.dom4j.io.XMLWriter writer;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage()
						.getExchange().containsKey(SUPRESS_XML_DECLARATION)) {
					org.dom4j.io.OutputFormat format = new org.dom4j.io.OutputFormat();
					format.setSuppressDeclaration(true);
					writer = new org.dom4j.io.XMLWriter(os, format);
				} else {
					writer = new org.dom4j.io.XMLWriter(os);
				}
				writer.write(doc);
				writer.flush();
			} else {
				super.writeTo(doc, cls, type, anns, mt, headers, os);
			}
		}
	}

	Thread4RestServiceProviderEndpoint thread4RestServiceProviderEndpoint = null;

	class Thread4RestServiceProviderEndpoint extends Thread {

		private final String endpointUrl;

		private final JSONtoFILEv2 job;

		private org.apache.cxf.endpoint.Server server;

		private org.apache.cxf.jaxrs.JAXRSServerFactoryBean sf;

		public Thread4RestServiceProviderEndpoint(JSONtoFILEv2 job,
				String endpointUrl) {
			this.job = job;
			this.endpointUrl = endpointUrl;
			this.sf = new org.apache.cxf.jaxrs.JAXRSServerFactoryBean();
		}

		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		public org.apache.cxf.endpoint.Server getServer() {
			return server;
		}

		public org.apache.cxf.jaxrs.JAXRSServerFactoryBean getJAXRSServerFactoryBean() {
			return sf;
		}

		public void run() {

			try {
				RestServiceProviderImpl4TalendJob provider = new RestServiceProviderImpl4TalendJob(
						job);

				if (sf.getProperties() == null) {
					sf.setProperties(new java.util.HashMap<String, Object>());
				}

				java.util.List<Object> providers = (java.util.List<Object>) sf
						.getProviders();
				providers
						.add(new ExceptionMapper4TalendJobRestService(provider));
				providers.add(new StreamingDOM4JProvider());

				org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
				jsonProvider.setIgnoreNamespaces(true);
				jsonProvider.setAttributesToElements(true);

				jsonProvider.setConvertTypesToStrings(false);

				providers.add(jsonProvider);
				sf.setProviders(providers);
				sf.setTransportId("http://cxf.apache.org/transports/http");
				sf.setResourceClasses(RestServiceProviderImpl4TalendJob.class);
				sf.setResourceProvider(
						RestServiceProviderImpl4TalendJob.class,
						new org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider(
								provider));
				sf.setAddress(endpointUrl);

				final java.util.List<org.apache.cxf.feature.Feature> features = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

				sf.setFeatures(features);

				server = sf.create();

				// System.out.println("REST service [endpoint: " + endpointUrl +
				// "] published");
			} catch (Throwable e) {
				e.printStackTrace();
			}
		}

		public void stopEndpoint() {
			if (null != server) {
				server.stop();
				server.destroy();
				// System.out.println("REST service [endpoint: " + endpointUrl +
				// "] unpublished");
			}
		}
	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DEMO_JSONtoFILEv2 = new byte[0];
		static byte[] commonByteArray_DEMO_JSONtoFILEv2 = new byte[0];

		public String messageType;

		public String getMessageType() {
			return this.messageType;
		}

		public String picks;

		public String getPicks() {
			return this.picks;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_JSONtoFILEv2.length) {
					if (length < 1024
							&& commonByteArray_DEMO_JSONtoFILEv2.length == 0) {
						commonByteArray_DEMO_JSONtoFILEv2 = new byte[1024];
					} else {
						commonByteArray_DEMO_JSONtoFILEv2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_JSONtoFILEv2, 0, length);
				strReturn = new String(commonByteArray_DEMO_JSONtoFILEv2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_JSONtoFILEv2) {

				try {

					int length = 0;

					this.messageType = readString(dis);

					this.picks = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.messageType, dos);

				// String

				writeString(this.picks, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("messageType=" + messageType);
			sb.append(",picks=" + picks);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class extract2Struct implements
			routines.system.IPersistableRow<extract2Struct> {
		final static byte[] commonByteArrayLock_DEMO_JSONtoFILEv2 = new byte[0];
		static byte[] commonByteArray_DEMO_JSONtoFILEv2 = new byte[0];

		public String picks;

		public String getPicks() {
			return this.picks;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_JSONtoFILEv2.length) {
					if (length < 1024
							&& commonByteArray_DEMO_JSONtoFILEv2.length == 0) {
						commonByteArray_DEMO_JSONtoFILEv2 = new byte[1024];
					} else {
						commonByteArray_DEMO_JSONtoFILEv2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_JSONtoFILEv2, 0, length);
				strReturn = new String(commonByteArray_DEMO_JSONtoFILEv2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_JSONtoFILEv2) {

				try {

					int length = 0;

					this.picks = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.picks, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("picks=" + picks);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(extract2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tojava1Struct implements
			routines.system.IPersistableRow<tojava1Struct> {
		final static byte[] commonByteArrayLock_DEMO_JSONtoFILEv2 = new byte[0];
		static byte[] commonByteArray_DEMO_JSONtoFILEv2 = new byte[0];

		public String messageType;

		public String getMessageType() {
			return this.messageType;
		}

		public String picks;

		public String getPicks() {
			return this.picks;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_JSONtoFILEv2.length) {
					if (length < 1024
							&& commonByteArray_DEMO_JSONtoFILEv2.length == 0) {
						commonByteArray_DEMO_JSONtoFILEv2 = new byte[1024];
					} else {
						commonByteArray_DEMO_JSONtoFILEv2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_JSONtoFILEv2, 0, length);
				strReturn = new String(commonByteArray_DEMO_JSONtoFILEv2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_JSONtoFILEv2) {

				try {

					int length = 0;

					this.messageType = readString(dis);

					this.picks = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.messageType, dos);

				// String

				writeString(this.picks, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("messageType=" + messageType);
			sb.append(",picks=" + picks);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tojava1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DEMO_JSONtoFILEv2 = new byte[0];
		static byte[] commonByteArray_DEMO_JSONtoFILEv2 = new byte[0];

		public String messageType;

		public String getMessageType() {
			return this.messageType;
		}

		public String picks;

		public String getPicks() {
			return this.picks;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_JSONtoFILEv2.length) {
					if (length < 1024
							&& commonByteArray_DEMO_JSONtoFILEv2.length == 0) {
						commonByteArray_DEMO_JSONtoFILEv2 = new byte[1024];
					} else {
						commonByteArray_DEMO_JSONtoFILEv2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_JSONtoFILEv2, 0, length);
				strReturn = new String(commonByteArray_DEMO_JSONtoFILEv2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_JSONtoFILEv2) {

				try {

					int length = 0;

					this.messageType = readString(dis);

					this.picks = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.messageType, dos);

				// String

				writeString(this.picks, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("messageType=" + messageType);
			sb.append(",picks=" + picks);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class restoutStruct implements
			routines.system.IPersistableRow<restoutStruct> {
		final static byte[] commonByteArrayLock_DEMO_JSONtoFILEv2 = new byte[0];
		static byte[] commonByteArray_DEMO_JSONtoFILEv2 = new byte[0];

		public String body;

		public String getBody() {
			return this.body;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_JSONtoFILEv2.length) {
					if (length < 1024
							&& commonByteArray_DEMO_JSONtoFILEv2.length == 0) {
						commonByteArray_DEMO_JSONtoFILEv2 = new byte[1024];
					} else {
						commonByteArray_DEMO_JSONtoFILEv2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_JSONtoFILEv2, 0, length);
				strReturn = new String(commonByteArray_DEMO_JSONtoFILEv2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_JSONtoFILEv2) {

				try {

					int length = 0;

					this.body = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.body, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + body);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(restoutStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRESTRequest_1_LoopProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				restoutStruct restout = new restoutStruct();
				row1Struct row1 = new row1Struct();
				extract2Struct extract2 = new extract2Struct();
				tojava1Struct tojava1 = new tojava1Struct();
				tojava1Struct row3 = tojava1;

				/**
				 * [tRESTRequest_1_Loop begin ] start
				 */

				int NB_ITERATE_tRESTRequest_1_In = 0; // for statistics

				ok_Hash.put("tRESTRequest_1_Loop", false);
				start_Hash.put("tRESTRequest_1_Loop",
						System.currentTimeMillis());

				currentVirtualComponent = "tRESTRequest_1";

				currentComponent = "tRESTRequest_1_Loop";

				int tos_count_tRESTRequest_1_Loop = 0;

				class BytesLimit65535_tRESTRequest_1_Loop {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTRequest_1_Loop().limitLog4jByte();
				if (execStat) {

					runStat.updateStatOnConnection("restout" + iterateId, 0, 0);

					runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					runStat.updateStatOnConnection("extract2" + iterateId, 0, 0);

					runStat.updateStatOnConnection("tojava1" + iterateId, 0, 0);

					runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

				}

				restout = null;

				int nb_line_tRESTRequest_1 = 0;

				try {

					java.util.Map<String, Object> requestMessage_tRESTRequest_1 = (java.util.Map<String, Object>) globalMap
							.get("restRequest");

					restEndpoint = "http://localhost:8088/";

					if (null == requestMessage_tRESTRequest_1) {

						if (restTalendJobAlreadyStarted) {
							throw new RuntimeException(
									"request is not provided");
						} else {
							if (!runInTalendEsbRuntimeContainer
									&& null == thread4RestServiceProviderEndpoint) {
								String endpointUrl_tRESTRequest_1 = checkEndpointUrl(restEndpoint);
								// *** external thread for endpoint
								// initialization
								thread4RestServiceProviderEndpoint = new Thread4RestServiceProviderEndpoint(
										this, endpointUrl_tRESTRequest_1);
								thread4RestServiceProviderEndpoint.start();
								// *** external thread for endpoint
								// initialization
							}

							restTalendJobAlreadyStarted = true;

							if (runInDaemonMode) {
								Thread.currentThread();
								try {
									while (true) {
										Thread.sleep(60000);
									}
								} catch (InterruptedException e_tRESTRequest_1) {
									// e_tRESTRequest_1.printStackTrace();
									// throw new
									// TalendException(e_tRESTRequest_1,
									// "wholeJob", globalMap);
								}
							}
						}
						return;
					}

					/**
					 * [tRESTRequest_1_Loop begin ] stop
					 */

					/**
					 * [tRESTRequest_1_Loop main ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_Loop";

					resourceMap.put("inIterateVComp", true);

					tos_count_tRESTRequest_1_Loop++;

					/**
					 * [tRESTRequest_1_Loop main ] stop
					 */

					/**
					 * [tRESTRequest_1_Loop process_data_begin ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_Loop";

					/**
					 * [tRESTRequest_1_Loop process_data_begin ] stop
					 */
					NB_ITERATE_tRESTRequest_1_In++;

					if (execStat) {
						runStat.updateStatOnConnection("Iterate", 1, "exec"
								+ NB_ITERATE_tRESTRequest_1_In);
						// Thread.sleep(1000);
					}

					/**
					 * [tExtractJSONFields_2 begin ] start
					 */

					ok_Hash.put("tExtractJSONFields_2", false);
					start_Hash.put("tExtractJSONFields_2",
							System.currentTimeMillis());

					currentComponent = "tExtractJSONFields_2";

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null) {

							runStat.updateStatOnConnection("extract2"
									+ iterateId, 0, 0);

						}
					}

					int tos_count_tExtractJSONFields_2 = 0;

					class BytesLimit65535_tExtractJSONFields_2 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tExtractJSONFields_2().limitLog4jByte();

					int nb_line_tExtractJSONFields_2 = 0;
					String jsonStr_tExtractJSONFields_2 = "";

					class JsonPathCache_tExtractJSONFields_2 {
						final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

						public com.jayway.jsonpath.JsonPath getCompiledJsonPath(
								String jsonPath) {
							if (jsonPathString2compiledJsonPath
									.containsKey(jsonPath)) {
								return jsonPathString2compiledJsonPath
										.get(jsonPath);
							} else {
								com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
										.compile(jsonPath);
								jsonPathString2compiledJsonPath.put(jsonPath,
										compiledLoopPath);
								return compiledLoopPath;
							}
						}
					}

					JsonPathCache_tExtractJSONFields_2 jsonPathCache_tExtractJSONFields_2 = new JsonPathCache_tExtractJSONFields_2();

					/**
					 * [tExtractJSONFields_2 begin ] stop
					 */

					/**
					 * [tLogRow_4 begin ] start
					 */

					ok_Hash.put("tLogRow_4", false);
					start_Hash.put("tLogRow_4", System.currentTimeMillis());

					currentComponent = "tLogRow_4";

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null) {

							runStat.updateStatOnConnection("row3" + iterateId,
									0, 0);

						}
					}

					int tos_count_tLogRow_4 = 0;

					class BytesLimit65535_tLogRow_4 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tLogRow_4().limitLog4jByte();

					// /////////////////////

					final String OUTPUT_FIELD_SEPARATOR_tLogRow_4 = "|";
					java.io.PrintStream consoleOut_tLogRow_4 = null;

					StringBuilder strBuffer_tLogRow_4 = null;
					int nb_line_tLogRow_4 = 0;
					// /////////////////////

					/**
					 * [tLogRow_4 begin ] stop
					 */

					/**
					 * [tJava_1 begin ] start
					 */

					ok_Hash.put("tJava_1", false);
					start_Hash.put("tJava_1", System.currentTimeMillis());

					currentComponent = "tJava_1";

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null) {

							runStat.updateStatOnConnection("tojava1"
									+ iterateId, 0, 0);

						}
					}

					int tos_count_tJava_1 = 0;

					class BytesLimit65535_tJava_1 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tJava_1().limitLog4jByte();

					String foo = MyRoutine.modifyDocument("a", "b");
					System.out.println(tojava1);

					/**
					 * [tJava_1 begin ] stop
					 */

					/**
					 * [tMap_1 begin ] start
					 */

					ok_Hash.put("tMap_1", false);
					start_Hash.put("tMap_1", System.currentTimeMillis());

					currentComponent = "tMap_1";

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null) {

							runStat.updateStatOnConnection("row1" + iterateId,
									0, 0);

						}
					}

					int tos_count_tMap_1 = 0;

					class BytesLimit65535_tMap_1 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tMap_1().limitLog4jByte();

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_1__Struct {
					}
					Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					extract2Struct extract2_tmp = new extract2Struct();
					tojava1Struct tojava1_tmp = new tojava1Struct();
					// ###############################

					/**
					 * [tMap_1 begin ] stop
					 */

					/**
					 * [tExtractJSONFields_1 begin ] start
					 */

					ok_Hash.put("tExtractJSONFields_1", false);
					start_Hash.put("tExtractJSONFields_1",
							System.currentTimeMillis());

					currentComponent = "tExtractJSONFields_1";

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null) {

							runStat.updateStatOnConnection("restout"
									+ iterateId, 0, 0);

						}
					}

					int tos_count_tExtractJSONFields_1 = 0;

					class BytesLimit65535_tExtractJSONFields_1 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tExtractJSONFields_1().limitLog4jByte();

					int nb_line_tExtractJSONFields_1 = 0;
					String jsonStr_tExtractJSONFields_1 = "";

					class JsonPathCache_tExtractJSONFields_1 {
						final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

						public com.jayway.jsonpath.JsonPath getCompiledJsonPath(
								String jsonPath) {
							if (jsonPathString2compiledJsonPath
									.containsKey(jsonPath)) {
								return jsonPathString2compiledJsonPath
										.get(jsonPath);
							} else {
								com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
										.compile(jsonPath);
								jsonPathString2compiledJsonPath.put(jsonPath,
										compiledLoopPath);
								return compiledLoopPath;
							}
						}
					}

					JsonPathCache_tExtractJSONFields_1 jsonPathCache_tExtractJSONFields_1 = new JsonPathCache_tExtractJSONFields_1();

					/**
					 * [tExtractJSONFields_1 begin ] stop
					 */

					/**
					 * [tRESTRequest_1_In begin ] start
					 */

					ok_Hash.put("tRESTRequest_1_In", false);
					start_Hash.put("tRESTRequest_1_In",
							System.currentTimeMillis());

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					int tos_count_tRESTRequest_1_In = 0;

					class BytesLimit65535_tRESTRequest_1_In {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tRESTRequest_1_In().limitLog4jByte();
					resourceMap.remove("inIterateVComp");

					/**
					 * [tRESTRequest_1_In begin ] stop
					 */

					/**
					 * [tRESTRequest_1_In main ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					if (requestMessage_tRESTRequest_1.containsKey("ERROR")) { // wrong
																				// request
																				// received
						restout = null;
					} else { // non-error (not wrong request)

						String matchedUriPattern_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1
								.get("PATTERN");
						String matchedFlow_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1
								.get("OPERATION");

						java.util.Map<String, Object> params_tRESTRequest_1 = (java.util.Map<String, Object>) requestMessage_tRESTRequest_1
								.get("PARAMS");
						if (matchedFlow_tRESTRequest_1.equals("restout")) {
							restout = new restoutStruct();
							Object bodyObject_tRESTRequest_1 = requestMessage_tRESTRequest_1
									.get("BODY");
							if (null != bodyObject_tRESTRequest_1) {

								restout.body = (String) bodyObject_tRESTRequest_1;

							}
						} else { // non matched flow
							restout = null;
						}

					}

					globalMap.put("tRESTRequest_1_URI",
							(String) requestMessage_tRESTRequest_1.get("URI"));
					globalMap.put("tRESTRequest_1_URI_BASE",
							(String) requestMessage_tRESTRequest_1
									.get("URI_BASE"));
					globalMap.put("tRESTRequest_1_URI_ABSOLUTE",
							(String) requestMessage_tRESTRequest_1
									.get("URI_ABSOLUTE"));
					globalMap.put("tRESTRequest_1_URI_REQUEST",
							(String) requestMessage_tRESTRequest_1
									.get("URI_REQUEST"));
					globalMap.put("tRESTRequest_1_HTTP_METHOD",
							(String) requestMessage_tRESTRequest_1.get("VERB"));

					globalMap.put("tRESTRequest_1_ATTACHMENT_HEADERS",
							requestMessage_tRESTRequest_1
									.get("ATTACHMENT_HEADERS"));
					globalMap.put("tRESTRequest_1_ATTACHMENT_FILENAMES",
							requestMessage_tRESTRequest_1
									.get("ATTACHMENT_FILENAMES"));

					globalMap.put("tRESTRequest_1_PRINCIPAL_NAME",
							(String) requestMessage_tRESTRequest_1
									.get("PRINCIPAL_NAME"));
					globalMap.put("tRESTRequest_1_CORRELATION_ID",
							(String) requestMessage_tRESTRequest_1
									.get("CorrelationID"));

					tos_count_tRESTRequest_1_In++;

					/**
					 * [tRESTRequest_1_In main ] stop
					 */

					/**
					 * [tRESTRequest_1_In process_data_begin ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					/**
					 * [tRESTRequest_1_In process_data_begin ] stop
					 */
					// Start of branch "restout"
					if (restout != null) {

						/**
						 * [tExtractJSONFields_1 main ] start
						 */

						currentComponent = "tExtractJSONFields_1";

						// restout
						// restout

						if (execStat) {
							runStat.updateStatOnConnection("restout"
									+ iterateId, 1, 1);
						}

						if (restout.body != null) {// C_01
							jsonStr_tExtractJSONFields_1 = restout.body
									.toString();

							row1 = null;

							String loopPath_tExtractJSONFields_1 = "$";
							java.util.List<Object> resultset_tExtractJSONFields_1 = new java.util.ArrayList<Object>();

							boolean isStructError_tExtractJSONFields_1 = true;
							try {
								com.jayway.jsonpath.ReadContext document_tExtractJSONFields_1 = com.jayway.jsonpath.JsonPath
										.parse(jsonStr_tExtractJSONFields_1);
								com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
										.getCompiledJsonPath(loopPath_tExtractJSONFields_1);
								Object result_tExtractJSONFields_1 = document_tExtractJSONFields_1
										.read(compiledLoopPath_tExtractJSONFields_1,
												net.minidev.json.JSONObject.class);
								if (result_tExtractJSONFields_1 instanceof net.minidev.json.JSONArray) {
									resultset_tExtractJSONFields_1 = (net.minidev.json.JSONArray) result_tExtractJSONFields_1;
								} else {
									resultset_tExtractJSONFields_1
											.add(result_tExtractJSONFields_1);
								}

								isStructError_tExtractJSONFields_1 = false;
							} catch (java.lang.Exception ex_tExtractJSONFields_1) {
								System.err.println(ex_tExtractJSONFields_1
										.getMessage());
							}

							String jsonPath_tExtractJSONFields_1 = null;
							com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_1 = null;

							Object value_tExtractJSONFields_1 = null;

							for (int i_tExtractJSONFields_1 = 0; isStructError_tExtractJSONFields_1
									|| (i_tExtractJSONFields_1 < resultset_tExtractJSONFields_1
											.size()); i_tExtractJSONFields_1++) {
								if (!isStructError_tExtractJSONFields_1) {
									Object row_tExtractJSONFields_1 = resultset_tExtractJSONFields_1
											.get(i_tExtractJSONFields_1);
									row1 = null;
									row1 = new row1Struct();
									nb_line_tExtractJSONFields_1++;
									try {
										jsonPath_tExtractJSONFields_1 = "$.messageType";
										compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
												.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

										try {
											value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
													.read(row_tExtractJSONFields_1);
											row1.messageType = value_tExtractJSONFields_1 == null ?

											null

													: value_tExtractJSONFields_1
															.toString();
										} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
											row1.messageType =

											null

											;
										}
										jsonPath_tExtractJSONFields_1 = "$.picks";
										compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
												.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

										try {
											value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
													.read(row_tExtractJSONFields_1);
											row1.picks = value_tExtractJSONFields_1 == null ?

											null

													: value_tExtractJSONFields_1
															.toString();
										} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
											row1.picks =

											null

											;
										}
									} catch (java.lang.Exception ex_tExtractJSONFields_1) {
										System.err
												.println(ex_tExtractJSONFields_1
														.getMessage());
										row1 = null;
									}

								}

								isStructError_tExtractJSONFields_1 = false;

								// }

								tos_count_tExtractJSONFields_1++;

								/**
								 * [tExtractJSONFields_1 main ] stop
								 */

								/**
								 * [tExtractJSONFields_1 process_data_begin ]
								 * start
								 */

								currentComponent = "tExtractJSONFields_1";

								/**
								 * [tExtractJSONFields_1 process_data_begin ]
								 * stop
								 */
								// Start of branch "row1"
								if (row1 != null) {

									/**
									 * [tMap_1 main ] start
									 */

									currentComponent = "tMap_1";

									// row1
									// row1

									if (execStat) {
										runStat.updateStatOnConnection("row1"
												+ iterateId, 1, 1);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_1 = false;
									boolean mainRowRejected_tMap_1 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
										// ###############################
										// # Output tables

										extract2 = null;
										tojava1 = null;

										// # Output table : 'extract2'
										extract2_tmp.picks = row1.picks;
										extract2 = extract2_tmp;

										// # Output table : 'tojava1'
										tojava1_tmp.messageType = null;
										tojava1_tmp.picks = null;
										tojava1 = tojava1_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_1 = false;

									tos_count_tMap_1++;

									/**
									 * [tMap_1 main ] stop
									 */

									/**
									 * [tMap_1 process_data_begin ] start
									 */

									currentComponent = "tMap_1";

									/**
									 * [tMap_1 process_data_begin ] stop
									 */
									// Start of branch "extract2"
									if (extract2 != null) {

										/**
										 * [tExtractJSONFields_2 main ] start
										 */

										currentComponent = "tExtractJSONFields_2";

										// extract2
										// extract2

										if (execStat) {
											runStat.updateStatOnConnection(
													"extract2" + iterateId, 1,
													1);
										}

										if (extract2.picks != null) {// C_01
											jsonStr_tExtractJSONFields_2 = extract2.picks
													.toString();

											tos_count_tExtractJSONFields_2++;

											/**
											 * [tExtractJSONFields_2 main ] stop
											 */

											/**
											 * [tExtractJSONFields_2
											 * process_data_begin ] start
											 */

											currentComponent = "tExtractJSONFields_2";

											/**
											 * [tExtractJSONFields_2
											 * process_data_begin ] stop
											 */
										} // C_01

										/**
										 * [tExtractJSONFields_2
										 * process_data_end ] start
										 */

										currentComponent = "tExtractJSONFields_2";

										/**
										 * [tExtractJSONFields_2
										 * process_data_end ] stop
										 */

									} // End of branch "extract2"

									// Start of branch "tojava1"
									if (tojava1 != null) {

										/**
										 * [tJava_1 main ] start
										 */

										currentComponent = "tJava_1";

										// tojava1
										// tojava1

										if (execStat) {
											runStat.updateStatOnConnection(
													"tojava1" + iterateId, 1, 1);
										}

										row3 = tojava1;

										tos_count_tJava_1++;

										/**
										 * [tJava_1 main ] stop
										 */

										/**
										 * [tJava_1 process_data_begin ] start
										 */

										currentComponent = "tJava_1";

										/**
										 * [tJava_1 process_data_begin ] stop
										 */

										/**
										 * [tLogRow_4 main ] start
										 */

										currentComponent = "tLogRow_4";

										// row3
										// row3

										if (execStat) {
											runStat.updateStatOnConnection(
													"row3" + iterateId, 1, 1);
										}

										// /////////////////////

										strBuffer_tLogRow_4 = new StringBuilder();

										if (row3.messageType != null) { //

											strBuffer_tLogRow_4.append(String
													.valueOf(row3.messageType));

										} //

										strBuffer_tLogRow_4.append("|");

										if (row3.picks != null) { //

											strBuffer_tLogRow_4.append(String
													.valueOf(row3.picks));

										} //

										if (globalMap.get("tLogRow_CONSOLE") != null) {
											consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap
													.get("tLogRow_CONSOLE");
										} else {
											consoleOut_tLogRow_4 = new java.io.PrintStream(
													new java.io.BufferedOutputStream(
															System.out));
											globalMap.put("tLogRow_CONSOLE",
													consoleOut_tLogRow_4);
										}
										consoleOut_tLogRow_4
												.println(strBuffer_tLogRow_4
														.toString());
										consoleOut_tLogRow_4.flush();
										nb_line_tLogRow_4++;
										// ////

										// ////

										// /////////////////////

										tos_count_tLogRow_4++;

										/**
										 * [tLogRow_4 main ] stop
										 */

										/**
										 * [tLogRow_4 process_data_begin ] start
										 */

										currentComponent = "tLogRow_4";

										/**
										 * [tLogRow_4 process_data_begin ] stop
										 */

										/**
										 * [tLogRow_4 process_data_end ] start
										 */

										currentComponent = "tLogRow_4";

										/**
										 * [tLogRow_4 process_data_end ] stop
										 */

										/**
										 * [tJava_1 process_data_end ] start
										 */

										currentComponent = "tJava_1";

										/**
										 * [tJava_1 process_data_end ] stop
										 */

									} // End of branch "tojava1"

									/**
									 * [tMap_1 process_data_end ] start
									 */

									currentComponent = "tMap_1";

									/**
									 * [tMap_1 process_data_end ] stop
									 */

								} // End of branch "row1"

								// end for
							}

						} // C_01

						/**
						 * [tExtractJSONFields_1 process_data_end ] start
						 */

						currentComponent = "tExtractJSONFields_1";

						/**
						 * [tExtractJSONFields_1 process_data_end ] stop
						 */

					} // End of branch "restout"

					/**
					 * [tRESTRequest_1_In process_data_end ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					/**
					 * [tRESTRequest_1_In process_data_end ] stop
					 */

					/**
					 * [tRESTRequest_1_In end ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					resourceMap.put("inIterateVComp", true);

					ok_Hash.put("tRESTRequest_1_In", true);
					end_Hash.put("tRESTRequest_1_In",
							System.currentTimeMillis());

					/**
					 * [tRESTRequest_1_In end ] stop
					 */

					/**
					 * [tExtractJSONFields_1 end ] start
					 */

					currentComponent = "tExtractJSONFields_1";

					globalMap.put("tExtractJSONFields_1_NB_LINE",
							nb_line_tExtractJSONFields_1);

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null
								|| !((Boolean) resourceMap
										.get("inIterateVComp"))) {
							runStat.updateStatOnConnection("restout"
									+ iterateId, 2, 0);
						}
					}

					ok_Hash.put("tExtractJSONFields_1", true);
					end_Hash.put("tExtractJSONFields_1",
							System.currentTimeMillis());

					/**
					 * [tExtractJSONFields_1 end ] stop
					 */

					/**
					 * [tMap_1 end ] start
					 */

					currentComponent = "tMap_1";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null
								|| !((Boolean) resourceMap
										.get("inIterateVComp"))) {
							runStat.updateStatOnConnection("row1" + iterateId,
									2, 0);
						}
					}

					ok_Hash.put("tMap_1", true);
					end_Hash.put("tMap_1", System.currentTimeMillis());

					/**
					 * [tMap_1 end ] stop
					 */

					/**
					 * [tExtractJSONFields_2 end ] start
					 */

					currentComponent = "tExtractJSONFields_2";

					globalMap.put("tExtractJSONFields_1_NB_LINE",
							nb_line_tExtractJSONFields_2);

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null
								|| !((Boolean) resourceMap
										.get("inIterateVComp"))) {
							runStat.updateStatOnConnection("extract2"
									+ iterateId, 2, 0);
						}
					}

					ok_Hash.put("tExtractJSONFields_2", true);
					end_Hash.put("tExtractJSONFields_2",
							System.currentTimeMillis());

					/**
					 * [tExtractJSONFields_2 end ] stop
					 */

					/**
					 * [tJava_1 end ] start
					 */

					currentComponent = "tJava_1";

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null
								|| !((Boolean) resourceMap
										.get("inIterateVComp"))) {
							runStat.updateStatOnConnection("tojava1"
									+ iterateId, 2, 0);
						}
					}

					ok_Hash.put("tJava_1", true);
					end_Hash.put("tJava_1", System.currentTimeMillis());

					/**
					 * [tJava_1 end ] stop
					 */

					/**
					 * [tLogRow_4 end ] start
					 */

					currentComponent = "tLogRow_4";

					// ////
					// ////
					globalMap.put("tLogRow_4_NB_LINE", nb_line_tLogRow_4);

					// /////////////////////

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null
								|| !((Boolean) resourceMap
										.get("inIterateVComp"))) {
							runStat.updateStatOnConnection("row3" + iterateId,
									2, 0);
						}
					}

					ok_Hash.put("tLogRow_4", true);
					end_Hash.put("tLogRow_4", System.currentTimeMillis());

					/**
					 * [tLogRow_4 end ] stop
					 */

					if (execStat) {
						runStat.updateStatOnConnection("Iterate", 2, "exec"
								+ NB_ITERATE_tRESTRequest_1_In);
					}

					/**
					 * [tRESTRequest_1_Loop process_data_end ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_Loop";

					/**
					 * [tRESTRequest_1_Loop process_data_end ] stop
					 */

					/**
					 * [tRESTRequest_1_Loop end ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_Loop";

					resourceMap.remove("inIterateVComp");

				} catch (Throwable e_tRESTRequest_1) {
					if (e_tRESTRequest_1 instanceof Exception) {
						new TalendException((Exception) e_tRESTRequest_1,
								currentComponent, globalMap).printStackTrace();
					} else {
						new TalendException(new RuntimeException(
								e_tRESTRequest_1), currentComponent, globalMap)
								.printStackTrace();
					}
					if (!globalMap.containsKey("restResponse")) {
						java.util.Map<String, Object> restFault_tRESTRequest_1 = new java.util.HashMap<String, Object>();
						restFault_tRESTRequest_1.put("STATUS", 500);
						restFault_tRESTRequest_1.put("BODY",
								e_tRESTRequest_1.getMessage());
						globalMap.put("restResponse", restFault_tRESTRequest_1);
					}
					return;
				}
				nb_line_tRESTRequest_1++;
				globalMap.put("tRESTRequest_1_NB_LINE", nb_line_tRESTRequest_1);

				if (execStat) {

					runStat.updateStatOnConnection("restout" + iterateId, 2, 0);

					runStat.updateStatOnConnection("row1" + iterateId, 2, 0);

					runStat.updateStatOnConnection("extract2" + iterateId, 2, 0);

					runStat.updateStatOnConnection("tojava1" + iterateId, 2, 0);

					runStat.updateStatOnConnection("row3" + iterateId, 2, 0);

				}

				ok_Hash.put("tRESTRequest_1_Loop", true);
				end_Hash.put("tRESTRequest_1_Loop", System.currentTimeMillis());

				/**
				 * [tRESTRequest_1_Loop end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRESTRequest_1_Loop finally ] start
				 */

				currentVirtualComponent = "tRESTRequest_1";

				currentComponent = "tRESTRequest_1_Loop";

				/**
				 * [tRESTRequest_1_Loop finally ] stop
				 */

				/**
				 * [tRESTRequest_1_In finally ] start
				 */

				currentVirtualComponent = "tRESTRequest_1";

				currentComponent = "tRESTRequest_1_In";

				/**
				 * [tRESTRequest_1_In finally ] stop
				 */

				/**
				 * [tExtractJSONFields_1 finally ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				/**
				 * [tExtractJSONFields_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_2 finally ] start
				 */

				currentComponent = "tExtractJSONFields_2";

				/**
				 * [tExtractJSONFields_2 finally ] stop
				 */

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */

				/**
				 * [tLogRow_4 finally ] start
				 */

				currentComponent = "tLogRow_4";

				/**
				 * [tLogRow_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final JSONtoFILEv2 JSONtoFILEv2Class = new JSONtoFILEv2();

		int exitCode = JSONtoFILEv2Class.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = JSONtoFILEv2.class.getClassLoader()
					.getResourceAsStream(
							"demo/jsontofilev2_0_1/contexts/" + contextStr
									+ ".properties");
			if (inContext == null) {
				inContext = JSONtoFILEv2.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tRESTRequest_1_LoopProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRESTRequest_1_Loop) {
			globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", -1);

			e_tRESTRequest_1_Loop.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : JSONtoFILEv2");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 82197 characters generated by Talend Open Studio for ESB on the 29 June, 2018
 * 2:54:06 PM IST
 ************************************************************************************************/
